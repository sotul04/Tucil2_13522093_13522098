import React, { useState, useEffect } from "react";
import { Coordinates, Plot, Line, Mafs, Point, Theme, useMovablePoint, useStopwatch, vec } from "mafs";
import { easeInOutCubic } from "js-easing-functions";

function xyFromBernsteinPolynomial(p1, c1, c2, p2, t) {
  return [
    vec.scale(p1, -(t ** 3) + 3 * t ** 2 - 3 * t + 1),
    vec.scale(c1, 3 * t ** 3 - 6 * t ** 2 + 3 * t),
    vec.scale(c2, -3 * t ** 3 + 3 * t ** 2),
    vec.scale(p2, t ** 3),
  ].reduce(vec.add, [0, 0]);
}

// function getStepLine(collection, length, layer, t, mainPoint) {
//   if (length === 2) {
//     newPoint = [vec.scale(collection[layer][0],collection[layer][1],t)];
//     collection.push(newPoint);
//     mainPoint.push(newPoint);
//   } else {
//     newPoint = [];
//     for (let i = 1; i < collection[layer].length; i++) {
//       newPoint.push(vec.scale(collection[layer][i-1],collection[layer][i],t));
//     }
//     collection.push(newPoint);
//     getStepLine(collection, length-1, layer+1,t,mainPoint)
//   }
// }

function inPairs(arr) {
  const pairs = [];
  for (let i = 0; i < arr.length - 1; i++) {
    pairs.push([arr[i], arr[i + 1]]);
  }
  return pairs;
}

// function inNestedPairs(collection) {
//   let nestedPairs = [];
//   limit = collection.length-1;
//   for (let i =0; i < limit; i++) {
//     for (let j =1; j < collection[i].length; j++) {
//       nestedPairs.push([collection[i][j-1],collection[i][j]]);
//     }
//   }
//   return nestedPairs;
// }

export default function BezierCurves() {
  const [t, setT] = useState(0.5);
  const opacity = 1 - (2 * t - 1) ** 6;

  const p1 = useMovablePoint([-5, 2]);
  const p2 = useMovablePoint([5, -2]);

  const c1 = useMovablePoint([-2, -3]);
  const c2 = useMovablePoint([2, 3]);

  const lerp1 = vec.lerp(p1.point, c1.point, t);
  const lerp2 = vec.lerp(c1.point, c2.point, t);
  const lerp3 = vec.lerp(c2.point, p2.point, t);

  const lerp12 = vec.lerp(lerp1, lerp2, t);
  const lerp23 = vec.lerp(lerp2, lerp3, t);

  const lerpBezier = vec.lerp(lerp12, lerp23, t);

  const corner = [];
  corner.push(p1.point);
  corner.push(p2.point);
  corner.push(p3.point);
  corner.push(p4.point);

  let collection = [];
  collection.push(corner);
  let mainPoint = [];

  getStepLine(collection, 4,0,t,mainPoint);

  const duration = 2;
  const { time, start } = useStopwatch({
    endTime: duration,
  });
  useEffect(() => {
    setTimeout(() => start(), 100);
  }, [start]);
  useEffect(() => {
    setT(easeInOutCubic(time, 0, 1, duration));
  }, [time]);

  function drawLineSegments(pointPath, color, customOpacity = opacity * 0.5) {
    return inPairs(pointPath).map(([p1, p2], index) => (
      <Line.Segment
        key={index}
        point1={p1}
        point2={p2}
        opacity={customOpacity}
        color={color}
      />
    ));
  }

  // function drawAllLine(collection, color, customOpacity = opacity * 0.5) {
  //   return inNestedPairs(collection).map(([p1,p2],index) => (
  //     <Line.Segment
  //       key={index}
  //       point1={p1}
  //       point2={p2}
  //       opacity={customOpacity}
  //       color={color}
  //     />
  //   ));
  // }

  function drawPoints(points, color) {
    return points.map((point, index) => (
      <Point
        key={index}
        x={point[0]}
        y={point[1]}
        color={color}
        opacity={opacity}
      />
    ));
  }

  return (
    <div id="kontol">
      <Mafs viewBox={{ x: [-5, 5], y: [-4, 4] }} zoom={{min: 0.001, max: 5}}>
        <Coordinates.Cartesian
          xAxis={{ labels: false, axis: false }}
          yAxis={{ labels: false, axis: false }}
        />

        {/* Control lines */}
        {drawLineSegments(
          [p1.point, c1.point, c2.point, p2.point],
          Theme.pink,
          0.5
        )}

        {/* {drawAllLine(
          [collection],
          Theme.pink,
          0.5
        )} */}

        {/* First-order lerps */}
        {drawLineSegments([lerp1, lerp2, lerp3], Theme.red)}
        {drawPoints([lerp1, lerp2, lerp3], Theme.red)}

        {/* Second-order lerps */}
        {drawLineSegments([lerp12, lerp23], Theme.yellow)}
        {drawPoints([lerp12, lerp23], Theme.yellow)}

        {/* Quadratic bezier lerp */}
        <Plot.Parametric
          t={[0, t]}
          weight={3}
          xy={(t) =>
            xyFromBernsteinPolynomial(
              p1.point,
              c1.point,
              c2.point,
              p2.point,
              t
            )
          }
        />
        {/* Show remaining bezier with dashed line */}
        <Plot.Parametric
          // Iterate backwards so that dashes don't move
          t={[1, t]}
          weight={3}
          opacity={0.5}
          style="dashed"
          xy={(t) =>
            xyFromBernsteinPolynomial(
              p1.point,
              c1.point,
              c2.point,
              p2.point,
              t
            )
          }
        />

        {drawPoints([lerpBezier], Theme.foreground)}

        {p1.element}
        {p2.element}
        {c1.element}
        {c2.element}
      </Mafs>

      {/* These classnames are part of the Mafs docs websiteâ€”they won't work for you. */}
      <div className="p-4 border-gray-700 border-t bg-black text-white">
        <span className="font-display">t =</span>{" "}
        <input
          type="range"
          min={0}
          max={1}
          step={0.005}
          value={t}
          onChange={(event) => setT(+event.target.value)}
        />
      </div>
    </div>
  );
}
